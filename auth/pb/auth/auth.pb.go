// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth/auth.proto

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	auth/auth.proto

It has these top-level messages:
	User
	LoginRequest
	LoginResponse
	RegisterRequest
	RegisterResponse
	SignoutRequest
	SignoutResponse
	GetAllUsersRequest
	GetAllUsersResponse
	GetUserRequest
	GetUserResponse
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type RegisterRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RegisterRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RegisterRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RegisterResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RegisterResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type SignoutRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SignoutRequest) Reset()                    { *m = SignoutRequest{} }
func (m *SignoutRequest) String() string            { return proto.CompactTextString(m) }
func (*SignoutRequest) ProtoMessage()               {}
func (*SignoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SignoutRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SignoutResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *SignoutResponse) Reset()                    { *m = SignoutResponse{} }
func (m *SignoutResponse) String() string            { return proto.CompactTextString(m) }
func (*SignoutResponse) ProtoMessage()               {}
func (*SignoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SignoutResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type GetAllUsersRequest struct {
}

func (m *GetAllUsersRequest) Reset()                    { *m = GetAllUsersRequest{} }
func (m *GetAllUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllUsersRequest) ProtoMessage()               {}
func (*GetAllUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type GetAllUsersResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *GetAllUsersResponse) Reset()                    { *m = GetAllUsersResponse{} }
func (m *GetAllUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAllUsersResponse) ProtoMessage()               {}
func (*GetAllUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetAllUsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type GetUserRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetUserResponse) Reset()                    { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()               {}
func (*GetUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*LoginRequest)(nil), "LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "LoginResponse")
	proto.RegisterType((*RegisterRequest)(nil), "RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "RegisterResponse")
	proto.RegisterType((*SignoutRequest)(nil), "SignoutRequest")
	proto.RegisterType((*SignoutResponse)(nil), "SignoutResponse")
	proto.RegisterType((*GetAllUsersRequest)(nil), "GetAllUsersRequest")
	proto.RegisterType((*GetAllUsersResponse)(nil), "GetAllUsersResponse")
	proto.RegisterType((*GetUserRequest)(nil), "GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "GetUserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Signout(ctx context.Context, in *SignoutRequest, opts ...grpc.CallOption) (*SignoutResponse, error)
	GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/Auth/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/Auth/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Signout(ctx context.Context, in *SignoutRequest, opts ...grpc.CallOption) (*SignoutResponse, error) {
	out := new(SignoutResponse)
	err := grpc.Invoke(ctx, "/Auth/Signout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	out := new(GetAllUsersResponse)
	err := grpc.Invoke(ctx, "/Auth/GetAllUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/Auth/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Signout(context.Context, *SignoutRequest) (*SignoutResponse, error)
	GetAllUsers(context.Context, *GetAllUsersRequest) (*GetAllUsersResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Signout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Signout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/Signout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Signout(ctx, req.(*SignoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAllUsers(ctx, req.(*GetAllUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Auth_Register_Handler,
		},
		{
			MethodName: "Signout",
			Handler:    _Auth_Signout_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _Auth_GetAllUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Auth_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}

func init() { proto.RegisterFile("auth/auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0xd3, 0x42, 0x5f, 0x78, 0x07, 0x69, 0xeb, 0xc2, 0xa1, 0xd6, 0x0b, 0x6e, 0xa2, 0xe1,
	0xd0, 0x0c, 0x09, 0x5e, 0xbc, 0x72, 0x91, 0x8b, 0xa7, 0xaa, 0x67, 0x53, 0xc3, 0x06, 0x1a, 0xa0,
	0x8b, 0xdd, 0x6d, 0xfc, 0xcb, 0xbd, 0x9b, 0xdd, 0x2e, 0x95, 0x16, 0x3f, 0x2f, 0x4d, 0xe6, 0xeb,
	0xd9, 0x99, 0xdf, 0x93, 0x82, 0x97, 0x14, 0x72, 0x35, 0x51, 0x1f, 0xdc, 0xe5, 0x5c, 0x72, 0xfa,
	0x00, 0xed, 0x47, 0xc1, 0x72, 0x12, 0x42, 0xb7, 0x10, 0x2c, 0xcf, 0x92, 0x2d, 0x0b, 0xac, 0x91,
	0x35, 0xfe, 0x1f, 0x57, 0x31, 0x19, 0x82, 0xc3, 0xb6, 0x49, 0xba, 0x09, 0x6c, 0x5d, 0x28, 0x03,
	0x35, 0xb1, 0x4b, 0x84, 0x78, 0xe5, 0xf9, 0x22, 0x68, 0x95, 0x13, 0xfb, 0x98, 0xde, 0xc2, 0xc9,
	0x1d, 0x5f, 0xa6, 0x59, 0xcc, 0x5e, 0x0a, 0x26, 0xe4, 0xb7, 0xea, 0x87, 0x3a, 0x76, 0x43, 0xe7,
	0x12, 0xfa, 0x46, 0x47, 0xec, 0x78, 0x26, 0xf4, 0x2a, 0x92, 0xaf, 0x59, 0x66, 0x54, 0xca, 0x80,
	0x3e, 0x81, 0x17, 0xb3, 0x65, 0x2a, 0x24, 0xcb, 0x7f, 0xf3, 0xe2, 0xdf, 0xef, 0xa1, 0xe0, 0x7f,
	0x3c, 0x60, 0x56, 0x71, 0xc1, 0xe6, 0x6b, 0xad, 0xdd, 0x8d, 0x6d, 0xbe, 0xa6, 0x23, 0x70, 0xef,
	0xd3, 0x65, 0xc6, 0x0b, 0xb9, 0xdf, 0xc1, 0x05, 0x3b, 0x5d, 0xe8, 0x8e, 0x7e, 0x6c, 0xa7, 0x0b,
	0x7a, 0x01, 0x5e, 0xd5, 0xf1, 0x85, 0xc8, 0x10, 0xc8, 0x9c, 0xc9, 0xd9, 0x66, 0xa3, 0x4c, 0x11,
	0x46, 0x88, 0x4e, 0x61, 0x50, 0xcb, 0x9a, 0xe1, 0x73, 0x70, 0xd4, 0x4d, 0x22, 0xb0, 0x46, 0xad,
	0x71, 0x6f, 0xea, 0xa0, 0x2a, 0xc7, 0x65, 0x8e, 0x46, 0xe0, 0xce, 0x99, 0xd4, 0x99, 0x9f, 0x91,
	0xd0, 0x08, 0xbc, 0xaa, 0xdb, 0xa8, 0x9f, 0x41, 0x5b, 0x95, 0x75, 0x6b, 0x25, 0xae, 0x53, 0xd3,
	0x37, 0x0b, 0xda, 0xb3, 0x42, 0xae, 0xc8, 0x15, 0x38, 0xda, 0x1f, 0xd2, 0xc7, 0x43, 0xbf, 0x43,
	0x17, 0xeb, 0xb6, 0x4d, 0xa0, 0xbb, 0xe7, 0x47, 0x7c, 0x6c, 0x78, 0x15, 0x9e, 0xe2, 0x11, 0xdc,
	0x08, 0x3a, 0x06, 0x15, 0xf1, 0xb0, 0x8e, 0x35, 0xf4, 0xb1, 0x49, 0xf1, 0x06, 0x7a, 0x07, 0x7c,
	0xc8, 0x00, 0x8f, 0x19, 0x86, 0x43, 0xfc, 0x0c, 0x61, 0x04, 0x1d, 0x73, 0x37, 0xf1, 0xb0, 0xce,
	0x2b, 0xf4, 0xb1, 0x81, 0xe4, 0xf9, 0x9f, 0xfe, 0x67, 0xae, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x95, 0x53, 0xe3, 0x51, 0x46, 0x03, 0x00, 0x00,
}
